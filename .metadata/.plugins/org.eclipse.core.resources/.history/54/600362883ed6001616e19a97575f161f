 **3day 주요목차**
 -method :  passing argument ( 데이터 전달 ) 
               return value ( 값을 반환 ) 
- 객체지향개념 중 Encapsulation (다음주 토론 후 발표) 
- 접근제어자(access modifier) 중 public , private , default 
- setter/getter method 
- Constructor ( 생성자 )  
--------------------------------------------------------
review
-> java 특징 : 플래폼 동립적(jvm)
			  객체지향언어(Object-Oriented)
			  Garbage collection(jvm이 메모리관리)
			  Multi-Threading
			 
	java는 컴파일과 런타임(실행) 과정이 있다
	컴파일러로 컴파일을 하면 .class이 생성된다
	.class는 JVM이 보기위한 바이트코드(기계어)로 구성된다
	
	런타임(실행)은 main method부터 시작된다

-> 객체지향 개념
	- 객체(Object) : 시스템의 기본단위, 속성과 기능으로 구성
	- 클래스 : 객체 생성을 위한 틀
	- 클래스는 붕어빵틀, 객체는 붕어빵
	- 객체지향(Object-Oriented)은
		시스템을 분석설계하기 위한 기법
		객체를 기본단위로 상정하고
		객체와 객체의 관계를 중심으로 시스템을
		분석설계하는 것을 말한다
		
	- 객체의 구성요소
		속성 : variable, attribute
		기능 : method, operation
		
	-> 자바의 기본 문법
		package step1; // 클래스를 디렉토리별로 분류
		
		//클래스 선언
		public class Person{
			//변수 선언 : String 문자열 타입  name 변수명
			String name;
			//메서드 정의
			public void eat(){// void : 리턴값이 없을 때
				//기능 정의
			}
		}
		
----------------------------------------------------
- method : passing argument(데이터 전달)
			return value(값을 반환)
메서드 기본 문법
[접근제어자] 리턴타입(없으면 void) 메서드명([매개변수]){
	메서드 실행 내용
	[return 값]
}

	method : return value
			메소드 호출되어 실행 후 호출한 곳으로
			결과를 반환할 때 사용하는 키워드
			메소드 실행 마지막 부분에 위치해야한다
			메서드 선언부에는 void 대신 반환할 리턴값의
			데이터타입이 선언되어야 한다
	
	p.getNickName() ----call----> public String getNickName(){
									return 리턴값
								}
					<-- return value --
					
					
- 객체지향개념 중 Encapsulation
  "public interface, private implementation"
  인터페이스와 구현부를 분리하여 설계한다
  인터페이스는 공개하고
  구현부는 감춘다
  
  Encapsulation 효과
  유지보수성 향상(구현부가 변경되어도 외부에는 영향이 없다)
  정보은닉(or 정보보호)
  인터페이스만 알면 구현부를 몰라도 사용할 수 있다
  (생산성 향상에 기여)
  
  Encapsulation 적용
  - 객체 단위에서의 적용은
  외부와 소통할 인터페이스 영역은
  public 접근제어자로 공개하고
  내부에서만 사용될 구현부 영역은
  private 접근제어자로 감춘다
  
  **접근제어자**
  public > protected > [default] > private
  
  public : 어디서나 접근가능
  protected : 이후 공부예정.. 상속관게일때는 어디서나 접근 가능
  				상속관계가 아니면 같은 패키지 내에서만 접근 가능
  [default] : 같은 패키지 내에서만 접근 가능
  private : 자신의 클래스 내에서만 접근 가능
  